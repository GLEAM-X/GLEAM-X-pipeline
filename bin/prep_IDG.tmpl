#! /bin/bash -l
#SBATCH --export=NONE
#SBATCH -M HOST
#SBATCH -p workq
#SBATCH --account=ACCOUNT
#SBATCH --time=05:00:00
#SBATCH --nodes=1
ARRAYLINE
TASKLINE

pipeuser=PIPEUSER
source /group/mwasci/$pipeuser/GLEAM-X-pipeline/GLEAM-X-pipeline.profile

set -ux

dbdir=DBDIR

function test_fail {
if [[ $1 != 0 ]]
then
    ${dbdir}/bin/track_task.py fail --jobid=${SLURM_JOBID} --taskid=${SLURM_ARRAY_TASKID} --finish_time=`date +%s`
    exit $1
fi
}

# Makes fits_warp parallelisation work on Zeus
KMP_INIT_AT_FORK=false

# Set version number
version=4.0 # First IDG pipeline Feb 2020
cores=NCPUS
memory=MEMORY
base=BASEDIR
obslist=OBSLIST
# Select observation
obsnum=`sed "${SLURM_ARRAY_TASK_ID}q;d" $obslist`

obslistfile=`basename $obslist`
imageprefix=${obslistfile%.*}

# S/N Level at which to choose masked pixels for deepclean
msigma=3
# S/N Threshold at which to stop cleaning
tsigma=1
# Set max separation for flux_warp crossmatch as ~ 1 beamwidth:
separation=$(echo "120/3600" | bc -l)

# Update database
${dbdir}/bin/track_task.py start --jobid=${SLURM_JOBID} --taskid=${SLURM_ARRAY_TASK_ID} --start_time=`date +%s`

cd ${base}

obss=($(sort $obslist))
num=${#obss[@]}
last=${obss[-1]}
middle=${obss[$((num / 2))]}

metafits=`ls -1 $last/*metafits* | head -1`

# Set up telescope-configuration-dependent options based on the highest-numbered observation
if [[ $last -lt 1151402936 ]] ; then
    telescope="MWA128T"
    basescale=1.1
    imsize=4000
    robust=-1.0
else
    telescope="MWALB"
    basescale=0.6
    imsize=8000
    robust=0.0
fi

# Set up channel-dependent options
chan=`pyhead.py -p CENTCHAN ${metafits} | awk '{print $3}'`
# Pixel scale
scale=`echo "$basescale / $chan" | bc -l` # At least 4 pix per synth beam for each channel

MODEL_CATALOGUE="/group/mwasci/$pipeuser/GLEAM-X-pipeline/models/GGSM.fits"

# All observations must be phased to the same point, otherwise IDG will give nonsense results
# We will use the middle observation of the (already-sorted) list to define the phase centre
ra=`pyhead.py -p RA $middle/$middle.metafits | awk '{print $3}'`
dec=`pyhead.py -p Dec $middle/$middle.metafits | awk '{print $3}'`
coords=`dc_to_sg.py $ra $dec`

cd $obsnum

chgcentre ${obsnum}.ms $coords

# Create initial images in order to derive the TEC screens
if [[ ! -e ${obsnum}_screen-image.fits ]]
then
    wsclean -j $cores \
        -abs-mem ${memory} \
        -mgain 0.85 \
        -nmiter 1 \
        -name ${obsnum}_screen \
        -size ${imsize} ${imsize} \
        -niter 400000 \
        -auto-threshold ${msigma} \
        -pol I \
        -weight briggs ${robust} \
        -scale ${scale:0:8} \
        ${obsnum}.ms
fi
BANE --noclobber --compress ${obsnum}_screen-image.fits
aegean --autoload --seedclip=10 --table=${obsnum}_screen-image.fits ${obsnum}_screen-image.fits
# Roughly the centre and radius of the image:
coords="$ra $dec"
# TODO make this dependent on CENTCHAN
radius=50. #24.8

# Match the image catalogue to the model table:
match_catalogues \
    ${obsnum}_screen-image_comp.fits \
    ${MODEL_CATALOGUE} \
    --separation ${separation} \
    --exclusion_zone ${separation} \
    --outname ./${obsnum}_xm.fits \
    --threshold 0.5 \
    --nmax 5000 \
    --coords ${coords} \
    --radius ${radius} \
    --ra2 "RAJ2000" \
    --dec2 "DEJ2000" \
    --ra1 "ra" \
    --dec1 "dec" \
    -F "int_flux" \
    --eflux "err_int_flux" \
    --localrms "local_rms"

# Detect source offsets
if [[ ! -e ${obsnum}_screen-image_warp.fits ]]
then
    fits_warp.py --xm ./${obsnum}_xm.fits \
             --infits ./${obsnum}_screen-image.fits \
             --suffix warp \
             --ra1 old_ra --dec1 old_dec \
             --ra2 RAJ2000 --dec2 DEJ2000 \
             --plot --testimage
fi
# Convert to dl, dm
/group/mwasci/nhurleywalker/MWA_Bits/convert_dxy_to_lm.py --prefix=${obsnum}_screen-image

${dbdir}/bin/track_task.py finish --jobid=${SLURM_JOBID} --taskid=${SLURM_ARRAY_TASK_ID} --finish_time=`date +%s`

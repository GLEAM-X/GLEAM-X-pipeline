#! /bin/bash -l

set -x

pipeuser=PIPEUSER
obslist=OBSLIST

# If obsnum is a file, then we are in an array job
if [[ -f ${obslist} ]]
then
    echo "obslist file ${obslist}"
    numfiles=$(wc -l "${obslist}" | awk '{print $1}')
    echo "${numfiles} obsids to transfer"

    jobid=${SLURM_JOB_ID}
else
    echo "ERROR: Expected obsnum to be a file, recieved ${obslist}"    
    exit 1
fi

echo "jobid: ${jobid}"

function test_fail {
if [[ $1 != 0 ]]
then
    track_task.py fail --jobid="${jobid}" --taskid="${taskid}" --finish_time="$(date +%s)"
    exit "$1"
fi
}

base=BASEDIR
user=ENDUSER
host=ENDPOINT
remote=REMOTE
project=PROJECT
port="PORT" 

failed=0
progress=0
cd "${base}" || exit 1

rsync -avh --whole-file --inplace --progress --stats \
                    -e "ssh -o StrictHostKeyChecking=no -i ${GXSSH} ${port}" \
                            ./*csv \
                            ./*png \
                            ./*txt \
                            ./*fits \
                            "${user}@${host}:${remote}/${project}"


for taskid in $(seq ${numfiles})
do
    (( progress=progress+1 ))
    echo "progress: ${progress}"
    echo "taskid: ${taskid}"

    track_task.py start --jobid="${jobid}" --taskid="${taskid}" --start_time="$(date +%s)"

    pwd
    cd "${base}" || (echo "cd to ${base} failed " && exit 1)
    obsnum=$(sed -n -e "${taskid}"p "${obslist}")
    datadir="${base}/${obsnum}"

    if [[ -d ${datadir} ]]
    then
        cd "${datadir}" || exit
        echo "obsid: ${obsnum}"
        # Singularity does not mount the home directory on pawsey correctly, so 
        # best to avoid trying to hit the home directory and load ssh keys elsewhere
        rsync -avh --whole-file --inplace --progress --stats \
                            -e "ssh -o StrictHostKeyChecking=no -i ${GXSSH} ${port}" \
                                    ./*clip.zip \
                                    ./*png \
                                    ./*log \
                                    ./*fits.sr6 \
                                    "${obsnum}"_transient.hdf5 \
                                    "${obsnum}"_summary.txt \
                                    "${obsnum}"_deep-sources.txt \
                                    "${obsnum}"_deep-sources-pb.txt \
                                    "${obsnum}"_deep-*-psf_crop.fits \
                                    "${obsnum}"_deep-*-image-pb.fits \
                                    "${obsnum}"_deep-*-image-pb_warp_weight.fits \
                                    "${obsnum}"_deep-*-image-pb_warp_rms.fits \
                                    "${obsnum}"_deep-*-image-pb_warp_bkg.fits \
                                    "${obsnum}"_deep-*-image-pb_warp_comp.fits \
                                    "${obsnum}"_deep-*-image-pb_warp_rescaled.fits \
                                    "${obsnum}"_deep-*-image-pb_warp_rescaled_weight.fits \
                                    "${obsnum}"_deep-*-image-pb_warp_rescaled_rms.fits \
                                    "${obsnum}"_deep-*-image-pb_warp_rescaled_bkg.fits \
                                    "${obsnum}"_deep-*-image-pb_warp_rescaled_comp.fits \
                                    "${obsnum}"_{north,south,east,west}-image_comp.fits \
                                    "${obsnum}"_*_xm.fits \
                                    "${user}@${host}:${remote}/${obsnum}"
        # test_fail $?

        # The iondiff is optional in the autocal stage. Unless used this will not be available
        if [ -f "${obsnum}_ionodiff.csv" ]
        then
            rsync -avh --whole-file --inplace --progress --stats \
                            -e "ssh -o StrictHostKeyChecking=no -i ${GXSSH} ${port}" \
                            "${obsnum}_ionodiff.csv" \
                            "${user}@${host}:${remote}/${obsnum}"  
        fi       

        echo 'Updating database'
        track_task.py finish --jobid="${jobid}" --taskid="${taskid}" --finish_time="$(date +%s)"

        track_task.py obs_status --obs_id="${obsnum}" --status='archived'
        echo "Database updated. Obsid $obsnum has been archived. "

    else
        echo "WARNING: ${obsnum} / ${taskid} / ${datadir} not found. Skipping. "
        (( failed=failed+1 ))
    fi
done

(( success=numfiles-failed ))
echo "Total obsids: ${numfiles}"
echo "Succeeded: ${success}"
echo "Failed: ${failed}"
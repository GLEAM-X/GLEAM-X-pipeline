#! /bin/bash -l

set -x

base=BASEDIR
pipeuser=PIPEUSER
mosaicnm=MOSAICNM
mosaicdir=MOSAICDIR
lowres_freq=LOWRES_FREQ
highres_freq=HIGHRES_FREQ
combined_freq=COMB_FREQ

cd "${base}" || exit 1

if [[ -z $mosaicdir ]]
then 
    mosaicdir="mosaic"
    echo "Using directory ${mosaicdir}"
    if [[ ! -d ${mosaicdir} ]]
    then
        echo "No such directory!!"
        exit 1
    else
        cd $mosaicdir
    fi
fi


fi

if [[ -z ${lowres_freq} ]]
then 
    lowres_freq="170-200MHz"
fi

if [[ -z ${highres_freq} ]]
then 
    highres_freq="200-231MHz"
fi 

if [[ -z ${combined_freq} ]]
then 
    combined_freq="170-231MHz"
fi 



# If obsnum is a file, then we are in an array job
if [[ -f ${obsnum} ]]
then
    taskid="${SLURM_ARRAY_TASK_ID}"
    jobid="${SLURM_ARRAY_JOB_ID}"
    
    echo "obsfile ${obsnum}"
    obsnum=$(sed -n -e "${SLURM_ARRAY_TASK_ID}"p "${obsnum}")
    echo "postimage obsid ${obsnum}"
else
    taskid=1
    jobid="${SLURM_JOB_ID}"
fi

echo "jobid: ${jobid}"
echo "taskid: ${taskid}"

function test_fail {
    if [[ $1 != 0 ]]
    then
        track_task.py fail --jobid="${jobid}" --taskid="${taskid}" --finish_time="$(date +%s)"
        exit "$1"
    fi
}

track_task.py start --jobid="${jobid}" --taskid="${taskid}" --start_time="$(date +%s)"

# Deleting the miriad files from previous rounds in case so that miriad doesn't freak out and crash
find . -iname "*.mir" -type d -exec rm -rf {} +

lowres_im="${mosaicnm}_${lowres_freq}_ddmod"
highres_im="${mosaicnm}_${highres_freq}_ddmod"
combined_im="${mosaicnm}_${combined_freq}_ddmod"

lowpsf="${mosaicnm}_${lowres_freq}_projpsf_psf"
highpsf="${mosaicnm}_${highres_freq}_projpsf_psf"

# extract beamsizes
out=$(extract_lowhigh_psf_beam.py ${lowpsf}.fits ${highpsf}.fits -p)
echo "${out}"
low_maj=$(echo "${out}" | grep 'Low' | cut -d ' ' -f4)
low_min=$(echo "${out}" | grep 'Low' | cut -d ' ' -f5)

high_maj=$(echo "${out}" | grep 'High' | cut -d ' ' -f4)
high_min=$(echo "${out}" | grep 'High' | cut -d ' ' -f5)

fits in="${lowres_im}.fits" out="${lowres_im}.mir" op=xyin
fits in="${highres_im}.fits" out="${highres_im}.mir" op=xyin

# Put the extracted values into the files, even the low frequency ones. Not entirely sure how often
# they are used by miriad, so lets just be sure they are in.
puthd in="${highres_im}.mir/bmaj" value="${high_maj},arcseconds"
puthd in="${highres_im}.mir/bmin" value="${high_min},arcseconds"
puthd in="${lowres_im}.mir/bmaj" value="${low_maj},arcseconds"
puthd in="${lowres_im}.mir/bmin" value="${low_min},arcseconds"

# Get out the values, we just put in, needlessly. See above message about why it is done this way.
prthd in="${lowres_im}.mir"


lowres_fwhm_a=$(prthd in="${lowres_im}.mir" | grep Beam | tr -s ' ' | cut -d ' ' -f3)
lowres_fwhm_b=$(prthd in="${lowres_im}.mir" | grep Beam | tr -s ' ' | cut -d ' ' -f5)
lowres_pos_ang=$(prthd in="${lowres_im}.mir" | grep Position | tr -s ' ' | cut -d ' ' -f3)

echo "Extracted FWHM of low-resolution image: ${lowres_fwhm_a}x${lowres_fwhm_b} and ${lowres_pos_ang}"

# Regriding the lowres to match highres
regrid in="${lowres_im}.mir" \
out="${lowres_im}_regrid.mir" \
tin="${highres_im}.mir"

# Convolving the high res to low res
convol map="${highres_im}.mir" \
fwhm="${lowres_fwhm_a},${lowres_fwhm_b}" \
pa="${lowres_pos_ang}" \
options=final \
out="${highres_im}_convol.mir"

# Averaging the two imgaes
maths exp="'(<${lowres_im}_regrid.mir>+<${highres_im}_convol.mir>)/2'" out="${combined_im}.mir"

puthd in="${combined_im}.mir/freq" value=200315000

# Exporting the miriad to a regular image
fits in="${combined_im}.mir" out="${combined_im}.fits" op=xyout

# Tidying up and removing the miriad files we just made since we don't need them 
find . -iname "*.mir" -type d -exec rm -rf {} +

BANE --cores 1\
--compress \
--noclobber \
"${combined_im}.fits"

aegean \
--seedclip=10 \
--maxsummits=5 \
--cores 1 \
--progress \
--autoload \
--table="${combined_im}_projpsf.fits" \
"${combined_im}.fits"

psf_select.py --input="${combined_im}_projpsf_comp.fits"
psf_create.py --input="${combined_im}_projpsf_comp_psfcat.fits"

aegean \
--seedclip=4 \
--maxsummits=5 \
--cores 1 \
--autoload \
--progress \
--psf="${combined_im}_projpsf.fits" \
--table="${combined_im}.fits" \
"${combined_im}.fits"

mosaic_global_rescale.py \
"${combined_im}_comp.fits" \
"${combined_im}.fits" \
"${GXBASE}/models/GGSM_sparse_unresolved.fits" \
--plot \
--verbose \
--apply


#! /bin/bash -l

set -x

base=BASEDIR
pipeuser=PIPEUSER
mosaicnm=MOSAICNM
mosaicdir=MOSAICDIR
lowres_freq=LOWRES_FREQ
highres_freq=HIGHRES_FREQ
combined_freq=COMB_FREQ
racen=RAPOINT
deccen=DECPOINT

cd "${base}" || exit 1

if [[ -z ${mosaicdir} ]]
then 
    mosaicdir="mosaic"
fi 

if [[ ! -d ${mosaicdir} ]]
then
    mkdir ${mosaicdir}
fi

echo "Using directory ${mosaicdir}"
cd "${mosaicdir}/" || exit 1

if [[ -z ${lowres_freq} ]]
then 
    lowres_freq="170-200MHz"
fi

if [[ -z ${highres_freq} ]]
then 
    highres_freq="200-231MHz"
fi 

if [[ -z ${combined_freq} ]]
then 
    combined_freq="170-231MHz"
fi 


# If obsnum is a file, then we are in an array job
if [[ -f ${obsnum} ]]
then
    taskid="${SLURM_ARRAY_TASK_ID}"
    jobid="${SLURM_ARRAY_JOB_ID}"
    
    echo "obsfile ${obsnum}"
    obsnum=$(sed -n -e "${SLURM_ARRAY_TASK_ID}"p "${obsnum}")
    echo "postimage obsid ${obsnum}"
else
    taskid=1
    jobid="${SLURM_JOB_ID}"
fi

echo "jobid: ${jobid}"
echo "taskid: ${taskid}"

function test_fail {
    if [[ $1 != 0 ]]
    then
        track_task.py fail --jobid="${jobid}" --taskid="${taskid}" --finish_time="$(date +%s)"
        exit "$1"
    fi
}

# Deleting the miriad files from previous rounds in case so that miriad doesn't freak out and crash
# find . -iname "*.mir" -type d -exec rm -rf {} +

lowres_im="${mosaicnm}_${lowres_freq}_ddmod"
highres_im="${mosaicnm}_${highres_freq}_ddmod"
combined_im="${mosaicnm}_${combined_freq}_ddmod"

if [[ -z $racen ]]
then 
    racen=$(pyhead.py -p CRVAL1 "${highres_im}.fits" | awk '{print $3}')
fi

if [[ -z $deccen ]]
then 
    deccen=$(pyhead.py -p CRVAL2 "${highres_im}.fits" | awk '{print $3}')
fi

tempimgdir="./temp_img_white"
mkdir temp_img_white
tmp="${combined_im}.list"
tmp_weights="${combined_im}.weights.txt"

rm ${tmp}
rm ${tmp_weights}

lowres_im_weight="${lowres_im}_weightmap.fits" 
highres_im_weight="${highres_im}_weightmap.fits"

if [[ ! -f ${lowres_im_weight} ]]
then 
    sigmoid_edge_weight.py "${lowres_im}.fits" "${lowres_im}_rms.fits" ${lowres_im_weight}
fi 
if [[ ! -f ${highres_im_weight} ]]
then 
    sigmoid_edge_weight.py "${highres_im}.fits" "${highres_im}_rms.fits" ${highres_im_weight}
fi 

echo "${lowres_im}.fits" >> "${tmp}" 
echo "${highres_im}.fits" >> "${tmp}"
echo "${lowres_im_weight}" >> "${tmp_weights}"
echo "${highres_im_weight}" >> "${tmp_weights}"

imagelist="${combined_im}.list"
template="${combined_im}.template"
weightout="${combined_im}_temp_weight.fits"
resampdir="${tempimgdir}"
weightnms="${tmp_weights}"

if [[ ! -e "${combined_im}_temp.fits" ]]
then 
    cat "${GXBASE}"/mosaics/nightwideresamp.swarp.tmpl \
        | sed "s;OUTIMAGE;${combined_im}_temp.fits;" \
        | sed "s;OUTWEIGHT;${weightout};" \
        | sed "s;WEIGHT_NAMES;${weightnms};" \
        | sed "s;RESAMPDIR;${resampdir};" \
        | sed "s;RACENT;${racen};" \
        | sed "s;DECENT;${deccen};" > ${template}.resamp 

    swarp -c "${template}.resamp" @"${imagelist}"
fi

if [[ ! -e "${combined_im}.fits" ]]
then
    fits_trim.py "${combined_im}_temp.fits" "${combined_im}.fits"

    # lowpsf="${mosaicnm}_${lowres_freq}_projpsf_psf"
    # highpsf="${mosaicnm}_${highres_freq}_projpsf_psf"

    # # extract beamsizes
    # out=$(extract_lowhigh_psf_beam.py ${lowpsf}.fits ${highpsf}.fits -p)
    # echo "${out}"
    # low_maj=$(echo "${out}" | grep 'Low' | cut -d ' ' -f4)
    # low_min=$(echo "${out}" | grep 'Low' | cut -d ' ' -f5)

    # high_maj=$(echo "${out}" | grep 'High' | cut -d ' ' -f4)
    # high_min=$(echo "${out}" | grep 'High' | cut -d ' ' -f5)

    # fits in="${lowres_im}.fits" out="${lowres_im}.mir" op=xyin
    # fits in="${highres_im}.fits" out="${highres_im}.mir" op=xyin

    # # Put the extracted values into the files, even the low frequency ones. Not entirely sure how often
    # # they are used by miriad, so lets just be sure they are in.
    # puthd in="${highres_im}.mir/bmaj" value="${high_maj},arcseconds"
    # puthd in="${highres_im}.mir/bmin" value="${high_min},arcseconds"
    # puthd in="${lowres_im}.mir/bmaj" value="${low_maj},arcseconds"
    # puthd in="${lowres_im}.mir/bmin" value="${low_min},arcseconds"

    # # Get out the values, we just put in, needlessly. See above message about why it is done this way.
    # prthd in="${lowres_im}.mir"


    # lowres_fwhm_a=$(prthd in="${lowres_im}.mir" | grep Beam | tr -s ' ' | cut -d ' ' -f3)
    # lowres_fwhm_b=$(prthd in="${lowres_im}.mir" | grep Beam | tr -s ' ' | cut -d ' ' -f5)
    # lowres_pos_ang=$(prthd in="${lowres_im}.mir" | grep Position | tr -s ' ' | cut -d ' ' -f3)

    # echo "Extracted FWHM of low-resolution image: ${lowres_fwhm_a}x${lowres_fwhm_b} and ${lowres_pos_ang}"

    # # Regriding the lowres to match highres
    # regrid in="${lowres_im}.mir" \
    # out="${lowres_im}_regrid.mir" \
    # tin="${highres_im}.mir"

    # # Convolving the high res to low res
    # convol map="${highres_im}.mir" \
    # fwhm="${lowres_fwhm_a},${lowres_fwhm_b}" \
    # pa="${lowres_pos_ang}" \
    # options=final \
    # out="${highres_im}_convol.mir"

    # # Averaging the two imgaes
    # maths exp="'(<${lowres_im}_regrid.mir>+<${highres_im}_convol.mir>)/2'" out="${combined_im}.mir"

    # puthd in="${combined_im}.mir/freq" value=200315000

    # # Exporting the miriad to a regular image
    # fits in="${combined_im}.mir" out="${combined_im}.fits" op=xyout

    # # Tidying up and removing the miriad files we just made since we don't need them 
    # find . -iname "*.mir" -type d -exec rm -rf {} +
else 
    echo "Already have combined image ${combined_im}.fits, won't remake."
fi

# Blur correction and final PSF generation
if [[ ! -e "${combined_im}_comp.fits" ]]
    then 
    BANE \
    --cores 1 \
    --compress \
    --noclobber \
    "${combined_im}.fits"

    if [[ ! -e "${combined_im}_projpsf_comp.fits" ]]
    then 
        aegean \
        --seedclip=10 \
        --maxsummits=5 \
        --progress \
        --autoload \
        --table="${combined_im}_projpsf.fits" \
        "${combined_im}.fits"
    fi 

    if [[ ! -e "${combined_im}_projpsf_psf.fits" ]]
    then 
        psf_select.py --input="${combined_im}_projpsf_comp.fits"
        psf_create.py --input="${combined_im}_projpsf_comp_psfcat.fits"
    fi

    aegean \
    --seedclip=4 \
    --maxsummits=5 \
    --autoload \
    --progress \
    --psf="${combined_im}_projpsf_psf.fits" \
    --table="${combined_im}.fits" \
    "${combined_im}.fits"

else
    echo "Already have final catalogue, not rerunning."
fi 

# SO THE PRIORIZED CAT SHOULD BE: "${combined_im}_comp.fits" but then we do a rescale below so I'm not sure what the output from that is...  

mosaic_global_rescale.py \
"${combined_im}_comp.fits" \
"${combined_im}.fits" \
"${GXBASE}/models/GGSM_sparse_unresolved.fits" \
--plot \
--verbose \
--apply

# TODO: Check output of the mosaic global rescale, I think it just changes so the ending is _rescaled.fits from whatever the imagenm is, checked Tims nextflow business and noticed an updated name but that's just ot name it with the drift name not the generic name

prep_priorized_fitting.py --mosaic "${mosaicnm}"

if [[ -e "${combined_im}_comp.fits" ]]
then
    echo "Convolution and catalogue successful!"
    exit 0
else
    echo "Mosaic failed! Can't find catalogue for priorized fitting :( "
    exit 1
fi

#!/bin/bash

# A small utility script to brutally coadd two mosaic images together.
# It is only meant to be used to provide the initial source finding with
# a deeper image from which the priorised fitting is based on.

basedir=BASEDIR

cd "${basedir}" || exit 1 

# The file extension used for the miriad files created. Be careful
# as this forms the basis of a 'rm' command -- do not change it to
# something used to end folders. 
MIRIADSUFFIX=widebandmir

find . -iname "*.${MIRIADSUFFIX}" -type d -exec rm -rf {} +

if [[ $(find . -iname "*170-200MHz_ddmod.fits" | wc -l) -ne 1 ]] || [[ $(find . -iname "*200-231MHz_ddmod.fits" | wc -l) -ne 1 ]]
then 
    echo "Could not find files to coadd. Exiting. "
    exit 1
fi

lowres_im=$(find . -iname "*170-200MHz_ddmod.fits" | head -n1)
highres_im=$(find . -iname "*200-231MHz_ddmod.fits"  | head -n1)

prefix=$(echo "${lowres_im}" | sed -e 's|_170-200MHz_ddmod.fits||' )
combined_im="${prefix}_170-231MHz"

lowpsf="${lowres_im/ddmod/projpsf_psf}"
highpsf="${highres_im/ddmod/projpsf_psf}"

# extract beamsizes
out=$(extract_lowhigh_psf_beam.py "${lowpsf}" "${highpsf}" -p)
echo "${out}"
low_maj=$(echo "${out}" | grep 'Low' | cut -d ' ' -f4)
low_min=$(echo "${out}" | grep 'Low' | cut -d ' ' -f5)

high_maj=$(echo "${out}" | grep 'High' | cut -d ' ' -f4)
high_min=$(echo "${out}" | grep 'High' | cut -d ' ' -f5)

# Reading both images into a miriad format
fits in="${lowres_im}" out="${lowres_im/fits/${MIRIADSUFFIX}}" op=xyin
fits in="${highres_im}" out="${highres_im/fits/${MIRIADSUFFIX}}" op=xyin

# Put the extracted values into the files, even the low frequency ones. Not entirely sure how often
# they are used by miriad, so lets just be sure they are in.
puthd in="${highres_im/fits/${MIRIADSUFFIX}}/bmaj" value="${high_maj},arcseconds"
puthd in="${highres_im/fits/${MIRIADSUFFIX}}/bmin" value="${high_min},arcseconds"
puthd in="${lowres_im/fits/${MIRIADSUFFIX}}/bmaj" value="${low_maj},arcseconds"
puthd in="${lowres_im/fits/${MIRIADSUFFIX}}/bmin" value="${low_min},arcseconds"

# Get out the values, we just put in, needlessly. See above message about why it is done this way.
prthd in="${lowres_im/fits/${MIRIADSUFFIX}}"

lowres_fwhm_a=$(prthd in="${lowres_im/fits/${MIRIADSUFFIX}}" | grep Beam | tr -s ' ' | cut -d ' ' -f3)
lowres_fwhm_b=$(prthd in="${lowres_im/fits/${MIRIADSUFFIX}}" | grep Beam | tr -s ' ' | cut -d ' ' -f5)
lowres_pos_ang=$(prthd in="${lowres_im/fits/${MIRIADSUFFIX}}" | grep Position | tr -s ' ' | cut -d ' ' -f3)

echo "Extracted FWHM of low-resolution image: ${lowres_fwhm_a}x${lowres_fwhm_b} and ${lowres_pos_ang}"

# Regriding the lowres to match highres
regrid in="${lowres_im/fits/${MIRIADSUFFIX}}" \
out="${lowres_im/fits/regrid.${MIRIADSUFFIX}}" \
tin="${highres_im/fits/${MIRIADSUFFIX}}"

# Convolving the high res to low res
convol map="${highres_im/fits/${MIRIADSUFFIX}}" \
fwhm="${lowres_fwhm_a},${lowres_fwhm_b}" \
pa="${lowres_pos_ang}" \
options=final \
out="${highres_im/fits/convol.${MIRIADSUFFIX}}"


final_lowmir_im="${lowres_im/fits/regrid.${MIRIADSUFFIX}}"
final_highmir_im="${highres_im/fits/convol.${MIRIADSUFFIX}}"
outfile="${combined_im}.${MIRIADSUFFIX}"

# Averaging the two images
maths exp="'(<${final_lowmir_im}>+<${final_highmir_im}>)/2'" out="${outfile}"

# Update the frequency information
puthd in="${outfile}"/freq value=200315000

# Exporting the miriad to a regular image
fits in="${outfile}" out="${outfile/${MIRIADSUFFIX}/fits}" op=xyout

# Be careful with this command and think carefully. The type 'd' will restrict
# the find to only apply the rm to directories. The specification of the suffix
# is used throughout this script to refer to miriad created files (which are really directories)
find . -iname "*.${MIRIADSUFFIX}" -type d -exec rm -rf {} +

BANE --cores ${GXNCPUS} \
--compress \
--noclobber \
"${combined_im}.fits"

aegean \
--seedclip=10 \
--maxsummits=5 \
--cores 1 \
--progress \
--autoload \
--table="${combined_im}_projpsf.fits" \
"${combined_im}.fits"

psf_select.py --input="${combined_im}_projpsf_comp.fits"
psf_create.py --input="${combined_im}_projpsf_comp_psfcat.fits"

aegean \
--seedclip=4 \
--maxsummits=5 \
--cores 1 \
--autoload \
--progress \
--psf="${combined_im}_projpsf_psf.fits" \
--table="${combined_im}.fits" \
"${combined_im}.fits"

mosaic_global_rescale.py \
"${combined_im}_comp.fits" \
"${combined_im}.fits" \
"${GXBASE}/models/GGSM_sparse_unresolved.fits" \
--plot \
--verbose \
--apply

#! /bin/bash -l 
start_time=$(date +%s)
set -x

# Task to identify an object to peel and then ... peel. 
# Originally based on the calibrate.tmpl file. Now using scripts/development from Stefan Duchense piip/potatopeel
# CURRENTLY THIS IS HARD CODED JUST FOR CYGA BECAUSE THIS SEEMS THE ONLY RELEVANT ONE BUT PERHAPS WILL NEED FIXING TO BE MORE GENERAL IN FUTURE 

pipeuser=PIPEUSER
obsnum=OBSNUM
node=NODETYPE
debug=DEBUG
base=BASEDIR

if [[ ! -z $debug ]]
then 
    datacolumn=CORRECTED_DATA
else 
    datacolumn=DATA
fi 

echo $GXCONTAINER 
if [[ ! -z ${node} ]]
then 
    export GXCONTAINER="${GXCONTAINERPATH}/gleamx_tools_${node}.img"
    echo ${GXCONTAINER}
else
    echo "Just using default $GXCONTAINER"
fi 

# If obsnum is a file, then we are in an array job
if [[ -f "${obsnum}" ]]
then
    taskid="${SLURM_ARRAY_TASK_ID}"
    jobid="${SLURM_ARRAY_JOB_ID}"

    echo "obsfile ${obsnum}"
    obsnum=$(sed -n -e "${SLURM_ARRAY_TASK_ID}"p "${obsnum}")
    echo "image obsid ${obsnum}"
else
    taskid=1
    jobid="${SLURM_JOB_ID}"
fi

echo "jobid: ${jobid}"
echo "taskid: ${taskid}"
tempdir=${GXTEMP}/${jobid}_${taskid}/


datadir="${base}/${obsnum}"
cd "${datadir}" || exit
ramDiskBase=$(mktemp -d /dev/shm/${jobid}_${taskid}.XXX)

tempdir="${ramDiskBase}${jobid}_${taskid}"
mkdir -p "$tempdir"
trap "rm -rf $tempdir" EXIT
cp -rf ${obsnum}.ms ${tempdir}/

metafits="$(ls -t ${obsnum}*metafits* | head -1)"

# Set up telescope-configuration-dependent options
if [[ $obsnum -lt 1151402936 ]] ; then
    telescope="MWA128T"
    basescale=1.1
    imsize=4000
    robust=-1.0
    timeres=4
    elif [[ $obsnum -ge 1151402936 ]] && [[ $obsnum -lt 1191580576 ]] ; then
    telescope="MWAHEX"
    basescale=2.0
    imsize=2000
    robust=-2.0
    timeres=8
    elif [[ $obsnum -ge 1191580576 ]] ; then
    telescope="MWALB"
    basescale=0.6
    imsize=8000
    robust=0.5
    timeres=4
fi

# Set up channel-dependent options
chan="$(singularity run $GXCONTAINER pyhead.py -p CENTCHAN ${metafits} | awk '{print $3}')"
bandwidth="$(singularity run $GXCONTAINER pyhead.py -p BANDWDTH ${metafits} | awk '{print $3}')"
centfreq="$(singularity run $GXCONTAINER pyhead.py -p FREQCENT ${metafits} | awk '{print $3}')"
chans="$(singularity run $GXCONTAINER pyhead.py -p CHANNELS ${metafits} | awk '{print $3}' | sed 's/,/ /g')"
chans=($chans)
minuv=75
minuvm=$(echo "234 * $minuv / $chan" | bc -l)
maxuvm=$(echo "390000 / (${chan} + 11)" | bc -l)
freq=$(echo "${chan}*1.28" | bc -l)
scale=$(echo "0.55/${chan}" | bc -l)
fov=$(echo "${scale}*${imsize}/2" | bc -l)


ra=$(singularity run $GXCONTAINER pyhead.py -p RA "$metafits" | awk '{print $3}' )
dec=$(singularity run $GXCONTAINER pyhead.py -p DEC "$metafits" | awk '{print $3}' )
radec_hmsdms=$(singularity run $GXCONTAINER dd_hms_dms.py ${ra} ${dec} -d "hms")


# Pixel scale
 # At least 4 pix per synth beam for each channel
scale=$(echo "$basescale / $chan" | bc -l)

# Skipping first and last 8 seconds
interval_start=$((8/timeres))
nscans=$(singularity run $GXCONTAINER pyhead.py -p NSCANS "${metafits}" | awk '{print $3}')
# native time resolution is 0.5 seconds
ninterval=$(echo "$nscans*0.5/$timeres" | bc)
interval_stop=$((ninterval-interval_start))
intervals_out=$((interval_stop-interval_start))

maxIntervals="$(singularity run $GXCONTAINER ms_get_max_intervals.py ${tempdir}/${obsnum}.ms)"
timeSteps=2
timesOut=${maxIntervals}
chansOut=32

image_size=$(echo "0.5/${scale}" | bc -l)
image_size=${image_size%.*}

# TODO: Check the form for ra and dec, NOTE: 'CygA': '19:59:28.35663 +40:44:02.0970'
# Phase rotate to CygA
source_ra=299.8681250
source_dec=40.7339139
singularity run $GXCONTAINER ms_rotate.py ${tempdir}/${obsnum}.ms ${source_ra} ${source_dec} -c ${datacolumn}

# Image to update model column used to peel
singularity run -B ${tempdir}/${obsnum}.ms:/input -B ${tempdir}:/tmp $GXCONTAINER wsclean \
        -abs-mem 60 \
        -j ${SLURM_CPUS_PER_TASK} \
        -parallel-gridding ${SLURM_CPUS_PER_TASK} \
        -temp-dir /tmp \
        -mgain 0.8 \
        -nmiter 5 \
        -niter 100000 \
        -auto-mask 5 \
        -auto-threshold 1 \
        -padding 3 \
        -name ${obsnum}_CygA \
        -size ${image_size} ${image_size} \
        -scale ${scale:0:8} \
        -weight briggs 0.0 \
        -pol xx,yy \
        -join-channels \
        -minuv-l 0 \
        -channels-out ${chansOut} \
        -interval $interval_start $interval_stop \
        -intervals-out $intervals_out \
        -fit-spectral-pol 3 \
        -data-column ${datacolumn} \
        /input | tee wsclean.log

# Note: Hard coded to match Stefans value... 
minuv=$(singularity run $GXCONTAINER get_baselines_from_lambdas.py ${freq} 100)


# Actual calibration to generate the model to peel
 singularity run $GXCONTAINER calibrate \
        -j ${SLURM_CPUS_PER_TASK} \
        -absmem 60 \
        -t ${timeSteps} \
        -ch 2 \
        -datacolumn ${datacolumn} \
        ${tempdir}/${obsnum}.ms \
        ${obsnum}_CygA.bin > ${obsnum}_calibrate_CygA.log 2>&1

singularity run $GXCONTAINER hyperdrive \
        solutions-plot \
        --ref-tile 127 \
        --max-amp 2 \
        -m ${obsnum}.metafits \
        "${obsnum}_CygA.bin" 

result=$(singularity run $GXCONTAINER check_assign_solutions.py -t 0.4 check ${obsnum}_CygA.bin)
if echo "${result}" | grep -q fail
then
    mv "${obsnum}_CygA.bin" "${obsnum}_CygA_failed.bin"
    echo "THE CALIBRATION FAILED! :( "
    end_time=$(date +%s)
    duration=$(echo "${end_time}-${start_time}" | bc -l)
    echo "INFO: Total time taken: ${duration}"
    exit 1
else 
    singularity run $GXCONTAINER invert_solutions.py ${obsnum}_CygA.bin -o ${obsnum}_CygA_inv.bin
    singularity run $GXCONTAINER applysolutions \
    -datacolumn "MODEL_DATA" \
    -nocopy \
    ${tempdir}/${obsnum}.ms \
    ${obsnum}_CygA_inv.bin

    singularity run $GXCONTAINER subtrmodel -usemodelcol \
    -datacolumn ${datacolumn} \
    "model" \
    ${tempdir}/${obsnum}.ms
    singularity run $GXCONTAINER ms_rotate.py ${tempdir}/${obsnum}.ms ${ra} ${dec}

    singularity run $GXCONTAINER taql alter table ${tempdir}/${obsnum}.ms drop column MODEL_DATA 

fi

if [[ -e "${obsnum}_CygA_inv.bin" ]]
then
    # rm -rf ${tempdir}/
    rm -rf ${obsnum}.ms && cp -rf ${tempdir}/${obsnum}.ms ./
    rm -rf ${tempdir}/
else 
    echo "There is no final image so I haven't subtracted anything because I'm not sure what's wrong" 
    rm -rf ${tempdir}/
    exit 1
fi 


end_time=$(date +%s)
duration=$(echo "${end_time}-${start_time}" | bc -l)
echo "INFO: Total time taken: ${duration}"

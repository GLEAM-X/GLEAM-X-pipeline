#! /bin/bash -l

pipeuser=PIPEUSER
obsnum=OBSNUM
calid=CALID
selfcal=SELFCAL

# If obsnum is a file, then we are in an array job
if [[ -f ${obsnum} ]]
then
    taskid=${SLURM_ARRAY_TASK_ID}
    jobid=${SLURM_ARRAY_JOB_ID}

    echo "obsfile ${obsnum}"
    obsnum=$(sed -n -e "${SLURM_ARRAY_TASK_ID}"p "${obsnum}")
    echo "apply_cal obsid ${obsnum}"
else
    taskid=1
    jobid=${SLURM_JOB_ID}
fi

# If obsnum is a file, then we are in an array job
if [[ -f ${calid} ]]
then
    echo "calid file is ${calid}"
    calid=$(sed -n -e "${taskid}"p "${calid}")
    echo "apply_cal calid ${calid}"
fi

echo "jobid: ${jobid}"
echo "taskid: ${taskid}"

function test_fail {
if [[ $1 != 0 ]]
then
    singularity run ${GXCONTAINER} track_task.py fail --jobid="${jobid}" --taskid="${taskid}" --finish_time="$(date +%s)"
    exit "$1"
fi
}

base=BASEDIR
debug=DEBUG

# apply calibration
singularity run ${GXCONTAINER} track_task.py start --jobid="${jobid}" --taskid="${taskid}" --start_time="$(date +%s)"

cd "${base}/${obsnum}" || exit
metafits="${obsnum}.metafits"

# if [ ! -z ${GXTEMP} ]
# then
#     mkdir -p ${GXTEMP}/${jobid}/
#     cp -rf ${obsnum}.ms ${GXTEMP}/${jobid}/
#     datadir="${GXTEMP}/${jobid}"
# else
#     datadir="${base}/${obsnum}"
# fi 



if [[ ! -z $selfcal ]]
then 
    calfile="${base}/${calid}/${calid}_selfsolutions.bin"
    # Checking if there is a gross sidelobe: 
    if [[ ! -e "${obsnum}_beamlobes.txt" ]]
    then
        singularity run ${GXCONTAINER} get_mwa_pb_lobes.py ${metafits} -mS > ${obsnum}_beamlobes.txt
    else
        echo "Already have the beam, not recalculating"
    fi 


    if [[ $(cat ${obsnum}_beamlobes.txt | wc -l ) -eq 1 ]]
    then 
        ra_sidelobe=$(cat ${obsnum}_beamlobes.txt | awk '{print $2}')
        dec_sidelobe=$(cat ${obsnum}_beamlobes.txt | awk '{print $3}')
    else
        echo "No major sidelobe, good stuff"
        self="False"
    fi 

    singularity run ${GXCONTAINER} get_mwa_pb_lobes.py ${metafits} -mM > ${obsnum}_mainlobes.txt
    ra_mainlobe=$(cat ${obsnum}_mainlobes.txt | awk '{print $2}')
    dec_mainlobe=$(cat ${obsnum}_mainlobes.txt | awk '{print $3}')

    # Check if crab or cyg is in the main fov
    ateam_fov=$(singularity run ${GXCONTAINER} check_src_fov.py -p ${ra_mainlobe} ${dec_mainlobe})
    if [[ "$ateam_fov" == "False" ]]
    then
        echo "There is no bright thing in main FOV, no self-cal needed!!"
        self2="False"
    else
        echo "Either some bright A-team is in the FOV, carrying on with selfcal"
        echo "ateam: $ateam_fov"
    fi 

    if [[ "$self" == "False" ]] && [[ "${self2}" == "False" ]]
    then 
        echo "Don't want to apply the selfcal, no need!"
        exit 0
    else
        echo "Either there is a gross sidelobe or Crab/CygA is in the mainlobe, carrying on with applying the selfcal"
    fi 
else
    calfile="${base}/${calid}/${calid}_local_gleam_model_solutions_initial_ref.bin"
fi 



if [[ ! -e "${calfile}" ]]
then
    echo "Could not find calibrator file ${calid}"
    singularity run ${GXCONTAINER} track_task.py fail --jobid="${jobid}" --taskid="${taskid}" --finish_time="$(date +%s)"
    exit 1
fi

echo "Calibration file is ${calfile}"

# If in debugging mode, apply to the CORRECTED_DATA column
# if [[ ! -z $debug ]]
# then 
#     hyperdrive \
#     solutions-apply \

# fi 
# If in debugging mode, apply to the CORRECTED_DATA column
if [[ ! -z $debug ]]
then
    singularity run ${GXCONTAINER} applysolutions \
                ${obsnum}.ms \
                "${calfile}"
# If in production mode, apply to the DATA column
else
    singularity run ${GXCONTAINER} applysolutions \
                -nocopy \
                ${obsnum}.ms \
                "${calfile}"
fi

test_fail $?

# if [ ! -z ${GXTEMP} ]
# then
#     rm -rf ${base}/${obsnum}/${obsnum}.ms && cp -rf ${datadir}/${obsnum}.ms ${base}/${obsnum}/
# fi

singularity run ${GXCONTAINER} track_task.py finish --jobid="${jobid}" --taskid="${taskid}" --finish_time="$(date +%s)"
singularity run ${GXCONTAINER} track_task.py obs_calibrator --obs_id "${obsnum}" --cal_id "${calid}"
#! /bin/bash -l

set -x

pipeuser=PIPEUSER
obsnum=OBSNUM

# If obsnum is a file, then we are in an array job
if [[ -f "${obsnum}" ]]
then
    taskid="${SLURM_ARRAY_TASK_ID}"
    jobid="${SLURM_ARRAY_JOB_ID}"

    echo "obsfile ${obsnum}"
    obsnum=$(sed -n -e "${SLURM_ARRAY_TASK_ID}"p "${obsnum}")
    echo "image obsid ${obsnum}"
else
    taskid=1
    jobid="${SLURM_JOB_ID}"
fi

echo "jobid: ${jobid}"
echo "taskid: ${taskid}"

function test_fail {
if [[ $1 != 0 ]]
then
    track_task.py fail --jobid="${jobid}" --taskid="${taskid}" --finish_time="$(date +%s)"
    exit "$1"
fi
}

# Set version number
base=BASEDIR
debug=DEBUG
# Which data column to image
if [[ ! -z $debug ]]
then
    datacolumn="CORRECTED_DATA"
else
    datacolumn="DATA"
fi

# WSClean suffixes for subchannels and MFS
subchans="MFS 0000 0001 0002 0003"
# S/N Level at which to choose masked pixels for deepclean
msigma=1
# S/N Threshold at which to stop cleaning
tsigma=1

# Update database
cd "${base}" || exit
track_task.py start --jobid="${jobid}" --taskid="${taskid}" --start_time="$(date +%s)"

datadir="${base}/${obsnum}"
cd "${datadir}" || exit

# TODO: replace with find
metafits="$(ls -t ${obsnum}*metafits* | head -1)"

# Set up telescope-configuration-dependent options
if [[ $obsnum -lt 1151402936 ]] ; then
    telescope="MWA128T"
    basescale=1.1
    imsize=4000
    robust=-1.0
elif [[ $obsnum -ge 1151402936 ]] && [[ $obsnum -lt 1191580576 ]] ; then
    telescope="MWAHEX"
    basescale=2.0
    imsize=2000
    robust=-2.0
elif [[ $obsnum -ge 1191580576 ]] ; then
    telescope="MWALB"
    basescale=0.6
    imsize=8000
    robust=0.5
fi

# Set up channel-dependent options
chan="$(pyhead.py -p CENTCHAN ${metafits} | awk '{print $3}')"
bandwidth="$(pyhead.py -p BANDWDTH ${metafits} | awk '{print $3}')"
centfreq="$(pyhead.py -p FREQCENT ${metafits} | awk '{print $3}')"
chans="$(pyhead.py -p CHANNELS ${metafits} | awk '{print $3}' | sed 's/,/ /g')"
chans=($chans)

# Pixel scale
 # At least 4 pix per synth beam for each channel
scale=$(echo "$basescale / $chan" | bc -l)

# Naming convention for output files
lowfreq=$(echo "${centfreq}" "${bandwidth}" | awk '{printf("%00d\n",$1-($2/2.)+0.5)}')
highfreq=$(echo "$centfreq $bandwidth" | awk '{printf("%00d\n",$1+($2/2.)+0.5)}')
freqrange="${lowfreq}-${highfreq}"

# Calculate min uvw in metres
minuv=75
minuvm=$(echo "234 * $minuv / $chan" | bc -l)
# In wavelengths, maximum 128T baseline at 200MHz was 1667 lambda long
# 300/1.28 * 1667 = 390000
# Calculate max uvw in metres
maxuvm=$(echo "390000 / (${chan} + 11)" | bc -l)

# Found that multiscale cleaning recovers flux density in the extragalactic sky better than not, and doesn't add much to processing time
multiscale="-multiscale -mgain 0.85 -multiscale-gain 0.15"

# Create a template image that has all the same properties as our eventual WSClean image
if [[ ! -e "${obsnum}_template.fits" ]]
then
    wsclean \
            -abs-mem ${GXMEMORY} \
            -mgain 1.0 \
            -nmiter 1 \
            -niter 0 \
            -name ${obsnum}_template \
            -size ${imsize} ${imsize} \
            -scale ${scale:0:8} \
            -pol XX \
            -data-column ${datacolumn} \
            -channel-range 4 5 \
            -interval 4 5 \
            -nwlayers ${GXNCPUS} \
            "${obsnum}.ms"

    rm "${obsnum}_template-dirty.fits"
    mv "${obsnum}_template-image.fits" "${obsnum}_template.fits"
fi

# Check whether Crab or Cyg is in the fov and whether we need to run selfcal or not
crab_fov=$(check_src_fov.py -f "${obsnum}_template.fits" -s "Crab")
cyga_fov=$(check_src_fov.py -f "${obsnum}_template.fits" -s "CygA")

# if [[ "$crab_fov" == "False" ]] && [[ "$cyga_fov" == "False" ]]
# then
#     echo "There is neither Crab nor CygA in the fov, no self cal needed!"
#     exit 0
# else
#     echo "Either Crab or CygA is in the FOV, carrying on with selfcal"
#     echo "Crab: $crab_fov"
#     echo "CygA: $cyga_fov"
# fi 

# Hardcoding John's PB script location for now
# Also hardcoding creating four sub-band beams
pols="XX XXi XY XYi YX YXi YY YYi"

for n in {0..3}
do
    i=$((n * 6))
    cstart=${chans[$i]}
    j=$((i + 5))
    cend=${chans[$j]}
    for pol in $pols
    do 
        if [[ ! -e "${obsnum}_000${n}-${pol}-beam.fits" ]]
        then
            lookup_jones.py ${obsnum} _template.fits ${obsnum}_000${n}- -c $cstart-$cend --wsclean_names
        fi
        ln -s "${obsnum}_000${n}-${pol}-beam.fits" "${obsnum}_initial-000${n}-beam-${pol}.fits"
    done
done

# Initial shallow clean to populate the model column 
# Set the pipefail so the test_fail does not test for tee
set -o pipefail
# shallow clean (for selfcal)
# Note: the autothreshold is set to 3 instead of 1 for s/n point to stop (want only shallow clean) also note, currently just doing the I pol to make sure it works but realistically, should do per pol 
if [[ ! -e ${obsnum}_initial-MFS-XX-image.fits ]]
then
    wsclean \
            -abs-mem ${GXMEMORY} \
            $multiscale \
            -nmiter 1 \
            -niter 40000 \
            -stop-negative \
            -name ${obsnum}_initial \
            -size ${imsize} ${imsize} \
            -scale ${scale:0:8} \
            -weight briggs ${robust} \
            -pol XX,YY,XY,YX \
            -channels-out 4 \
            -join-channels \
            -join-polarizations \
            -data-column ${datacolumn} \
            "${obsnum}.ms" | tee wsclean.log
else
    echo "Already have initial images, not reimaging shallow clean"
fi 


# Check if it made initial images 
if [[ ! -e ${obsnum}_initial-MFS-XX-image.fits ]]
then
    echo "Initial image did not generate! Something probs happened with WSClean"
    test_fail 1
fi

calibrate \
        -j ${GXNCPUS} \
        -absmem ${GXABSMEMORY} \
        -minuv ${minuvm} \
        -maxuv ${maxuvm} \
        -datacolumn ${datacolumn} \
        "${obsnum}.ms" \
        "${obsnum}_selfsolutions.bin" | tee calibrate.log 

aocal_plot.py --refant=127 ${obsnum}_selfsolutions.bin 
result=$(check_assign_solutions.py -t "0.25" check "${obsnum}_selfsolutions.bin")
if echo "${result}" | grep -q fail
then
    mv "${obsnum}_selfsolutions.bin" "${obsnum}_selfsolutions_failed.bin"
    echo "FAILED SELF CAL!"
    test_fail 1
fi


track_task.py finish --jobid="${jobid}" --taskid="${taskid}" --finish_time="$(date +%s)"
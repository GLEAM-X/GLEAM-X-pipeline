#!/bin/bash
#SBATCH --time=02:00:00
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --ntasks-per-node=1

set -x

pipeuser=PIPEUSER
obsnum=OBSNUM
ao_calibrate=OFFRINGA
node=NODETYPE

echo $SLURM_MEM_PER_NODE
echo $GXCONTAINER 

if [[ ! -z ${node} ]]
then 
    export GXCONTAINER="${GXCONTAINERPATH}/gleamx_tools_${node}.img"
    echo ${GXCONTAINER}
else
    echo "Just using default GXCONTAINER"
fi 

# If obsnum is a file, then we are in an array job
if [[ -f "${obsnum}" ]]
then
    taskid=${SLURM_ARRAY_TASK_ID}
    jobid=${SLURM_ARRAY_JOB_ID}

    echo "obsfile ${obsnum}"
    obsnum=$(sed -n -e "${SLURM_ARRAY_TASK_ID}"p "${obsnum}")
    echo "autocal obsid ${obsnum}"
else
    taskid=1
    jobid=${SLURM_JOB_ID}
fi

echo "jobid: ${jobid}"
echo "taskid: ${taskid}"

if [[ -n $TMPDIR_SHM && -d $TMPDIR_SHM ]];then
    ramDiskBase=$TMPDIR_SHM
else
    ramDiskBase=$(mktemp -d /dev/shm/${jobid}_${taskid}.XXX)
fi
tempdir="${ramDiskBase}/${jobid}_${taskid}"
mkdir -p "$tempdir"
[[ -d $tempdir ]] || die "RAM disk creation unsuccessful: $tempdir"
trap "rm -rf $ramDisk" EXIT
# tempdir=${GXTEMP}/${jobid}_${taskid}/

function test_fail {
if [[ $1 != 0 ]]
then
    singularity run ${GXCONTAINER} track_task.py fail --jobid="${jobid}" --taskid="${taskid}" --finish_time="$(date +%s)"
    exit "$1"
fi
}

datadir=DATADIR
if [[ $obsnum -gt 1300000000 ]] && [[ $obsnum -lt 1342950000 ]]
then
    refant=0
elif [[ $obsnum -gt 1342950000 ]]
then
    refant=8
else
    refant=127
fi
fraction=FRACTION
sthresh=STHRESH

# GLEAM-X sky model
if [[ ! -z ${ao_calibrate} ]]
then 
    catfile="${GXBASE}/models/GGSM_updated.fits"
else
    catfile="${GXBASE}/models/GGSM.txt"
fi

# MWA beam information
MWAPATH="${GXMWAPB}"

# Minimum baseline of 75 lambda (=250m at 88 MHz) for calibration
minuv=75

# Perform ionospheric triage? (1 means yes, blank means no)
ion=IONOTEST
# Interval for ionospheric triage (in time steps)
# Typically we have 2-minute observations which have been averaged to 4s
# So in total they contain 30 time steps
# Do do useful ionospheric differencing we need to compare the start and the end
ts=10

# start
singularity run ${GXCONTAINER} track_task.py start --jobid="${jobid}" --taskid="${taskid}" --start_time="$(date +%s)"

cd "${datadir}/${obsnum}" || exit



metafits="${obsnum}.metafits"
if [[ ! -e ${metafits} ]] || [[ ! -s ${metafits} ]]
then
    wget -O "${metafits}" http://ws.mwatelescope.org/metadata/fits?obs_id=${obsnum}
    test_fail $?
fi

calibrator=$(singularity run $GXCONTAINER pyhead.py -p CALIBSRC "$metafits" | awk '{print $3}' )
echo "Calibrator is $calibrator"

echo "Running infield calibration for $obsnum"
RA=$(singularity run $GXCONTAINER pyhead.py -p RA "$metafits" | awk '{print $3}' )
Dec=$(singularity run $GXCONTAINER pyhead.py -p DEC "$metafits" | awk '{print $3}' )
chan=$(singularity run $GXCONTAINER pyhead.py -p CENTCHAN "$metafits" | awk '{print $3}' )

if [[ ! -e "${obsnum}_local_gleam_model.txt" ]]
then
    if [[ ! -z ${ao_calibrate} ]]
    then
        singularity run ${GXCONTAINER} crop_catalogue.py \
            --ra="${RA}" \
            --dec="${Dec}" \
            --radius=30 \
            --top-bright=300 \
            --metafits="${metafits}" \
            --catalogue="${catfile}" \
            --fluxcol=S_200 \
            --plot "${obsnum}_local_gleam_model.png" \
            --output "${obsnum}_cropped_catalogue.fits"
        
        singularity run ${GXCONTAINER} vo2model.py \
            --catalogue="${obsnum}_cropped_catalogue.fits" \
            --point \
            --output="${obsnum}_local_gleam_model.txt" \
            --racol=RAJ2000 \
            --decol=DEJ2000 \
            --acol=a \
            --bcol=b \
            --pacol=pa \
            --fluxcol=S_200 \
            --alphacol=alpha
    else
        ln -s ${catfile} "${obsnum}_local_gleam_model.txt"
    fi 
fi
calmodel="${obsnum}_local_gleam_model.txt"


cd "${datadir}/${obsnum}" || exit
cp -rf ${obsnum}.ms ${tempdir}/ || exit 
# Check whether the phase centre has already changed
# Calibration will fail if it has, so measurement set must be shifted back to its original position
current=$(singularity run $GXCONTAINER chgcentre "${tempdir}/${obsnum}.ms") 



if [[ $current == *"shift"* ]] 
then
    echo "Detected that this measurement set has undergone a denormal shift; this must be undone before calibration."
    coords=$(singularity run $GXCONTAINER calc_optimum_pointing.py --metafits "${metafits}")
    echo "Optimally shifting co-ordinates of measurement set to $coords, without zenith shiftback."
    singularity run ${GXCONTAINER} chgcentre \
            "${tempdir}/${obsnum}.ms" \
            ${coords}
else
    echo "Detected that this measurement set has not yet had its phase centre changed. Not shifting."
fi

# uv range for calibration based on GLEAM-based sky model
# Calibrate takes a maximum uv range in metres
# Calculate min uvw in metres
minuvm=$(echo "234 * ${minuv} / ${chan}" | bc -l)
# In wavelengths, maximum 128T baseline at 200MHz was 1667 lambda long
# 300/1.28 * 1667 = 390000
# Calculate max uvw in metres
maxuvm=$(echo "390000 / (${chan} + 11)" | bc -l)

if [[ ! -z $ion ]]
then
    
    if [[ ! -z ${ao_calibrate} ]]
    then 

        echo "Performing ionospheric triage using calibrate. "
        # Ionospheric triage
        solutions="${obsnum}_${calmodel%%.txt}_solutions_ts${ts}.bin"
        # Remove duplicate obsnum
        solutions="${solutions/${obsnum}_${obsnum}_/${obsnum}_}"

        singularity run $GXCONTAINER calibrate \
                -t ${ts} \
                -j ${SLURM_CPUS_PER_TASK} \
                -absmem ${SLURM_MEM_PER_NODE} \
                -m "${calmodel}" \
                -minuv ${minuvm} \
                -maxuv ${maxuvm} \
                -applybeam -mwa-path "${MWAPATH}" \
                "${tempdir}/${obsnum}.ms" \
                "${solutions}"
        
        echo "Ionospheric calibration finished. Creating plots and statistics. "
        singularity run $GXCONTAINER aocal_plot.py --refant="${refant}" --amp_max=2 "${solutions}"
        singularity run $GXCONTAINER aocal_diff.py --metafits="${metafits}" --names "${solutions}" --refant="${refant}"
        # singularity run $GXCONTAINER iono_update.py --ionocsv "${obsnum}_ionodiff.csv"
    else
        echo "Performing ionospheric triage using hyperdrive. "
        # Ionospheric triage
        solutions1="${obsnum}_${calmodel%%.txt}_solutions_ts10.bin"
        # Remove duplicate obsnum
        solutions1="${solutions1/${obsnum}_${obsnum}_/${obsnum}_}"

        singularity run $GXCONTAINER hyperdrive \
            di-calibrate \
            --max-iterations 500 \
            --timesteps {0..9} \
            --num-sources 250 \
            --uvw-min "${minuv}lambda" \
            --uvw-max 1667lambda \
            --beam-file "${MWAPATH}/mwa_full_embedded_element_pattern.h5" \
            --outputs "${solutions1}" \
            -d "${tempdir}/${obsnum}.ms" "${obsnum}.metafits" \
            -s ${calmodel}
        
        singularity run $GXCONTAINER hyperdrive \
            solutions-plot \
            --ref-tile ${refant} \
            --max-amp 2 \
            -m ${obsnum}.metafits \
            "${solutions1}" 

        # solutions="${obsnum}_${calmodel%%.txt}_solutions_ts20.bin"
        # # Remove duplicate obsnum
        # solutions="${solutions/${obsnum}_${obsnum}_/${obsnum}_}"

        # export FI_CXI_DEFAULT_VNI=$(od -vAn -N4 -tu < /dev/urandom)
        # srun -N 1 -n $SLURM_NTASKS -c $SLURM_CPUS_PER_TASK -m block:block:block
        # singularity run $GXCONTAINER hyperdrive \
        #     di-calibrate \
        #     --timesteps {10..19} \
        #     --max-iterations 500 \
        #     --num-sources 1000 \
        #     --uvw-min "${minuv}lambda" \
        #     --uvw-max 1667lambda \
        #     --beam-file "${MWAPATH}/mwa_full_embedded_element_pattern.h5" \
        #     --outputs "${solutions}" \
        #     -d "${obsnum}.ms" "${obsnum}.metafits" \
        #     -s ${calmodel}

        # singularity run $GXCONTAINER hyperdrive \
        #     solutions-plot \
        #     --ref-tile ${refant} \
        #     --max-amp 2 \
        #     -m ${obsnum}.metafits \
        #     "${solutions}" 
        solutions="${obsnum}_${calmodel%%.txt}_solutions_ts30.bin"
        # Remove duplicate obsnum
        solutions="${solutions/${obsnum}_${obsnum}_/${obsnum}_}"

        singularity run $GXCONTAINER hyperdrive \
            di-calibrate \
            --timesteps {20..29} \
            --max-iterations 500 \
            --source-dist-cutoff 180 \
            --num-sources 250 \
            --uvw-min "${minuv}lambda" \
            --uvw-max 1667lambda \
            --beam-file "${MWAPATH}/mwa_full_embedded_element_pattern.h5" \
            --outputs "${solutions}" \
            -d "${tempdir}/${obsnum}.ms" "${obsnum}.metafits" \
            -s ${calmodel}
        
        
        singularity run $GXCONTAINER hyperdrive \
            solutions-plot \
            --ref-tile ${refant} \
            --max-amp 2 \
            -m ${obsnum}.metafits \
            "${solutions}" 

        echo "Ionospheric calibration finished. Creating plots and statistics. "


        singularity run ${GXCONTAINER} python ${GXBASE}/gleam_x/bin/aocal_diff.py --metafits="${metafits}" --names --lastsol "${solutions}" "${solutions1}" --refant="${refant}"
        # singularity run ${GXCONTAINER} iono_update.py --ionocsv "${obsnum}_ionodiff.csv"
    fi
fi

# At the moment, assume that the ionosphere is OK, and derive some real solutions
solutions="${obsnum}_${calmodel%%.txt}_solutions_initial.bin"
# Remove duplicate obsnum
solutions="${solutions/${obsnum}_${obsnum}_/${obsnum}_}"

if [[ ! -z ${ao_calibrate} ]]
then 
    # # calibrate
    singularity run $GXCONTAINER calibrate \
            -j ${SLURM_CPUS_PER_TASK} \
            -absmem ${SLURM_MEM_PER_NODE} \
            -m "${calmodel}" \
            -minuv $minuvm \
            -maxuv $maxuvm \
            -applybeam -mwa-path "${MWAPATH}" \
            "${tempdir}/${obsnum}".ms \
            "${solutions}"
else
    singularity run $GXCONTAINER hyperdrive \
        di-calibrate \
        --uvw-min "${minuv}lambda" \
        --source-dist-cutoff 180 \
        --max-iterations 500 \
        --num-sources 250 \
        --uvw-max 1667lambda \
        --beam-file "${MWAPATH}/mwa_full_embedded_element_pattern.h5" \
        --outputs "${solutions}" \
        -d "${tempdir}/${obsnum}.ms" "${obsnum}.metafits" \
        -s ${calmodel}
fi 

test_fail $?

# Create a version divided through by the reference antenna, so that all observations have the same relative XY phase, allowing polarisation calibration solutions to be transferred
# This also sets the cross-terms to zero by default
singularity run ${GXCONTAINER} aocal_phaseref.py "${solutions}" "${solutions%.bin}_ref.bin" "${refant}" --xy -2.806338586067941065e+01 --dxy -4.426533296449057023e-07  --ms "${tempdir}/${obsnum}.ms"

if [[ ! -z ${ao_calibrate} ]]
then 
    singularity run ${GXCONTAINER} aocal_plot.py --refant="${refant}" --amp_max=2 "${solutions%.bin}_ref.bin"
else
    # plot calibration solutions
    singularity run $GXCONTAINER hyperdrive \
        solutions-plot \
        --ref-tile ${refant} \
        --max-amp 2 \
        -m ${obsnum}.metafits \
        "${solutions%.bin}_ref.bin" 
fi

test_fail $?

# Test to see if the calibration solution meets minimum quality control. At the moment
# this is a simple check based on the number of flagged solutions
result=$(singularity run $GXCONTAINER check_assign_solutions.py -t "${fraction}" check "${solutions%.bin}_ref.bin")
if echo "${result}" | grep -q fail
then
    mv "${solutions%.bin}_ref.bin" "${solutions%.bin}_ref_failed.bin"
    # test_fail 1
fi

rm -rf ${tempdir}/

# if [[ -e "${solutions%.bin}_ref.bin" ]] || [[ -e "${solutions%.bin}_ref_failed.bin" ]]
# then
#     echo "There are calibration solutions (may or may not have failed)" 
#     # rm -rf ${obsnum}.ms && cp -rf ${tempdir}/${obsnum}.ms ./
#     rm -rf ${tempdir}/
# else 
#     echo "There is no final image so I haven't subtracted anything because I'm not sure what's wrong" 
#     rm -rf ${tempdir}/${obsnum}.ms
#     # exit 1
    
# fi 

singularity run ${GXCONTAINER} track_task.py finish --jobid="${jobid}" --taskid="${taskid}" --finish_time="$(date +%s)"

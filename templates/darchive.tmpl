#! /bin/bash -l

set -x

pipeuser=PIPEUSER
obsnum=OBSNUM
mosaicnm=MOSAICNM
# If obsnum is a file, then we are in an array job
if [[ -f ${obsnum} ]]
then
    taskid=${SLURM_ARRAY_TASK_ID}
    jobid=${SLURM_ARRAY_JOB_ID}

    echo "obsfile ${obsnum}"
    obsnum=$(sed -n -e "${SLURM_ARRAY_TASK_ID}p" "${obsnum}")
    echo "archive obsid ${obsnum}"
else 
    echo "ERROR: obsnum is expected to be a file, but received ${obsnum}"
    exit 1
fi

echo "jobid: ${jobid}"
echo "taskid: ${taskid}"


function test_fail {
if [[ $1 != 0 ]]
then
    singularity run ${GXCONTAINER} track_task.py fail --jobid="${jobid}" --taskid="${taskid}" --finish_time="$(date +%s)"
    exit "$1"
fi
}

singularity run ${GXCONTAINER} track_task.py start --jobid="${jobid}" --taskid="${taskid}" --start_time="$(date +%s)"

base=BASEDIR

datadir="${base}/${obsnum}"
cd "${datadir}" ||  exit 1

subchans="0000 0001 0002 0003 MFS"

# Post procressing tasks unrelated to fitswarp
for subchan in ${subchans}
do
    # Compress the near empty model files
    singularity run ${GXCONTAINER} clip_clean_components.py "${obsnum}_deep-${subchan}-model.fits"
    singularity run ${GXCONTAINER} clip_clean_components.py "${obsnum}_deep-${subchan}-model-pb.fits"
    
    # Dont like having to do I/O redirection for gzip to keep original file
    zip "${obsnum}_deep-${subchan}-models-clip.zip" "${obsnum}_deep-${subchan}-"model*-clip.fits

    # Create an extract of the psf
    psf=${obsnum}_deep-${subchan}-psf.fits
    crop=${psf%.fits}_crop.fits
    if [[ -e ${psf} ]] && [[ ! -e ${crop} ]]
    then
        # Get size of the total image
        x=$(singularity run ${GXCONTAINER} imsize "${psf}" | tr -s '[:blank:]' ' ' | cut -d ' ' -f7 | cut -d 'x' -f1)
        y=$(singularity run ${GXCONTAINER} imsize "${psf}" | tr -s '[:blank:]' ' ' | cut -d ' ' -f7 | cut -d 'x' -f2)
        
        # Pixels in central region to extract
        SIZE=200 

        # Bounds of region
        (( x1 = x/2 - SIZE/2 )) 
        (( x2 = x/2 + SIZE/2 ))
        (( y1 = y/2 - SIZE/2 ))
        (( y2 = y/2 + SIZE/2 ))

        # and extract
        singularity run ${GXCONTAINER} getfits -o "${crop}" "${x1}-${x2}" "${y1}-${y2}" "${psf}"
    fi

    # Compress the primary beam warped weight map
    warp="${obsnum}_deep-${subchan}-image-pb_warp_rescaled_weight.fits"
    compress="${warp}.sr6"
    if [[ ! -e "${compress}" ]]
    then
        singularity run ${GXCONTAINER} SR6 -o "${compress}" "${warp}"
    fi
done

echo 'Updating database'
singularity run ${GXCONTAINER} track_task.py finish --jobid="${jobid}" --taskid="${taskid}"  --finish_time="$(date +%s)"
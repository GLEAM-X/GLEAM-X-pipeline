#!/bin/bash -l

set -x

pipeuser=PIPEUSER

base=BASEDIR
obslist=OBSLIST
readfile=READ

if [[ -z $readfile ]]
then
    write="--write"
fi

subchans=(0000 0001 0002 0003 MFS)
subchan=${subchans[$SLURM_ARRAY_TASK_ID]}

taskid=${SLURM_ARRAY_TASK_ID}
jobid=${SLURM_ARRAY_JOB_ID}

echo "jobid: ${jobid}"
echo "taskid: ${taskid}"
echo "subchan: ${subchan}"

cd "${base}" || exit 1

obs=$(cat $obslist)

sublist="${obslist%.txt}_${subchan}.txt"

# track_task.py start_mosaic --jobid="${jobid}" --taskid="${taskid}" 

if [[ -e $sublist ]]
then
    rm "${sublist}"
fi

# extlist = ["", "_bkg", "_rms", "_weight", "_comp"]

for file in ${obs}
do
    if [[ -e "${file}/${file}_deep-${subchan}-image-pb_warp.fits" ]]
    then
        if [[ -e "${file}/${file}_deep-${subchan}-image-pb_warp_comp.fits" ]] && \
           [[ -e "${file}/${file}_deep-${subchan}-image-pb_warp_weight.fits" ]] && \
           [[ -e "${file}/${file}_deep-${subchan}-image-pb_warp_rms.fits" ]] && \
           [[ -e "${file}/${file}_deep-${subchan}-image-pb_warp_bkg.fits" ]] && \
           [[ -e "${file}/${file}_deep-${subchan}-image-pb_warp_comp.fits" ]]
        then
            echo "${file}/${file}_deep-${subchan}-image-pb_warp.fits" >> ${sublist}
        else
            echo "WARNING: A dependency file for ${file}/${file}_deep-${subchan}-image-pb_warp.fits was not found. Post imaging failed?"
        fi
    else
        echo "WARNING: ${file}/${file}_deep-${subchan}-image-pb_warp.fits was not found. Post imaging failed?"
    fi
done

polyfit_snapshots.py \
               --filelist "${sublist}" \
               --skymodel="${GXBASE}"/models/GGSM_sparse_unresolved.fits \
               $readfile $write --rescale --correctall --overwrite --plot 

# Check that all files created so I can use the right exit code
exitcode=0
files=$(cat "${sublist}")
for file in ${files}
do
    if [[ ! -e ${file%.fits}_rescaled.fits ]]
    then
        echo "Failed to create ${file%.fits}_rescaled.fits"
        exitcode=1
    fi
done

# track_task.py finish_mosaic --jobid="${jobid}" --taskid="${taskid}" 

exit $exitcode
